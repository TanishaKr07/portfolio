html {
  --color-accent: oklch(65% 50% 0);
  accent-color: var(--color-accent);
  color-scheme: light dark; 
  background-color: canvas;
  color: canvastext;  
}


body {
  font: 100% / 1.5 system-ui;
  max-width: 100ch;
  margin-inline: max(1em, (100% - 100ch) / 2);
  accent-color: var(--color-accent);
  background-color: canvas;
  color: canvastext;
}

nav {
  display: flex;
  padding: 0.5em;
  margin-bottom: 2em;
  border-bottom: 1px solid oklch(50% 10% 200 / 40%); 
}

nav ul,
nav li {
  display: contents;
}

nav a {
  text-decoration: none;
  color: inherit;
  flex: 1;
  text-align: center;
  padding: 0.5em;
  border-bottom: 0.4em solid transparent;
  transition: border-color 0.2s ease, background-color 0.2s ease;
}

nav a.current {
  border-bottom-color: var(--border-bottom);
  padding-bottom: 0.1em;
}

nav a:hover {
  border-bottom-color: var(--color-accent);
  background-color: color-mix(in oklch, var(--color-accent), canvas 85%);;
}


form {
  display: grid;
  grid-template-columns: auto 1fr;
  gap: 1em;
  align-items: center;
}

form label {
  display: contents; /* or wrap text in <span> if using manual columns */
}

form input,
form textarea {
  grid-column: 2 / 3; /* put input in second column */
} 

.projects {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(15em, 1fr));
    gap: 1em;
    align-items: start;
}
.projects article {
    display: grid;                 
    grid-template-rows: subgrid;   
    grid-row: span 3;              
    gap: 1em;                      
}
.projects article h2 {
    margin: 0;                     
}
h1, h2, h3, h4, h5, h6 { 
  line-height: 1.1; 
  text-wrap: balance;
  margin: 1em 0;
}
h1 {
    font-size: 4em;          
}

h2 {
    font-size: 2em;          
}
#profile-stats {
  margin: 2em auto;
  padding: 1.5em;
  max-width: 800px;
  background: rgba(102, 97, 102, 0.11);
  border-radius: 1em;
  box-shadow: 0 4px 10px rgb(244, 20, 210);
  text-align: center;
}

#profile-stats dl {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1em;
}

#profile-stats dt {
  grid-row: 1;
  font-weight: bold;
}

#profile-stats dd {
  grid-row: 2;
  margin: 0;
}

/* We need to add some CSS to make it look like an actual legend. You can experiment with the styles to make it look the way you want, but we’re including some tips below. Also note that the trick here is we added a <span> with a “swatch” class to each <li> so we can style them.

Making the swatch look like a swatch
You could probably want to make the swatch look like a swatch by:

Making it a square by e.g. giving it the same width and height, or declaring one of the two properties (e.g. width or height) plus aspect-ratio: 1 / 1.
Giving it a background color of var(--color)
You may find border-radius useful to add slight rounding to the corners or even make it into a full circle by setting it to 50%.
*/
.legend {
    list-style: none;
    display: flex;
    gap: 1em;
    flex-wrap: wrap;
    flex: 1;
    align-items: center;
    border: 1px solid oklch(60.039% 0.21333 341.555);
    padding: 1em;
    margin: 2em 0;
}

/*Applying layout on the list to make it look like a legend
I applied display: grid to the <ul> (avoid using the <ul> tag selector, use selector by class instead). To make the grid make best use of available space, I used an auto-fill grid template, and set the min-width of the list items to a reasonable value.

grid-template-columns: repeat(auto-fill, minmax(9em, 1fr));
This lays them all out on one line if there’s space, or multiple columns if not.

I also applied display: flex on each <li> (also give it a class name and apply CSS rule on the class) to vertically center align the text and the swatch (align-items: center) and give it spacing via gap.

// how you add class name as attributes using D3
let legend = d3.select('.legend');
data.forEach((d, idx) => {
    legend.append('li')
          .attr('style', `--color:${colors(idx)}`)
          .attr('class', ...)
          ...
})
Make sure the gap you specify for the <li>s is smaller than the gap you specify for the whole legend’s grid, to honor the design principle of Proximity.*/
.legend li {
    display: flex;
    align-items: center;
    gap: 0.5em;
}
.legend .swatch {
    width: 1.5em;
    height: 1.5em;
    aspect-ratio: 1 / 1;
    background-color: var(--color);
    border-radius: 0.3em;
    align-items: center;
}
.legend li span {
    font-size: 0.9em;
    align-items: center;
}
/*You probably also want to specify a border around the legend, as well as spacing inside it (padding) and around it (margin). The final result will vary depending on your exact CSS, but this was mine:*/
.legend {
    border: 1px solid oklch(60.039% 0.21333 341.555);
    padding: 1em;
    margin: 2em 0;
    align-items: center;
}

.chart-legend-container {
    /* 1. Enable Flexbox on the container */
    /* This makes the SVG and the UL elements align horizontally (row direction by default) */
    display: flex;
    
    /* 2. Vertical Alignment */
    /* Centers the chart and the legend relative to each other's vertical space */
    align-items: center; 
    
    /* 3. Spacing/Gap */
    /* Adds space between the SVG (chart) and the UL (legend) */
    gap: 20px; /* You can adjust this value */
}
